#------#
# lfrc #
#------#

#---------------
# Variables.
#---------------

set drawbox true
set dirpreviews true
set scrolloff 1
set info size:time
set cursorpreviewfmt "\033[7;2m"
set ifs "\n"

set hidden true
set history false

set shell sh
set shellopts '-eu'


#---------------
# Commands.
#---------------

cmd open &{{
	case $(file --mime-type -Lb $f) in
		text/*) lf -remote "send $id \$$EDITOR \$fx";;
		*) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
	esac
}}

cmd extract ${{
	set -f
	case $f in
		*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) aunpack $f;;
		*.tar.gz|*.tgz) aunpack $f;;
		*.tar.xz|*.txz) aunpack $f;;
		*.zip) aunpack $f;;
		*.rar) aunpack x $f;;
		*.7z) aunpack $f;;
	esac
}}

cmd tar ${{
	set -f
	mkdir $1
	cp -r $fx $1
	tar czf $1.tar.gz $1
	rm -rf $1
}}

cmd zip ${{
	set -f
	mkdir $1
	cp -r $fx $1
	zip -r $1.zip $1
	rm -rf $1
}}

cmd trash ${{
	set -f
	printf "Trash $(echo $fx) (y or n) "
	read ans
	[ "$ans" = "y" ] && mv -f $fx "$XDG_DATA_HOME/Trash/files/$(echo ${fx##*/})-$(date -I'seconds')"
}}


#---------------
# Bindings.
#---------------

map O $$f     # Run file with shell.
map o open $f # Open file with application.

# Emacs.

map <a-!> shell

map <c-g> cmd-escape
map <c-g> cmd-interrupt

map R push :rename<space>
map D trash

map <a-v> page-up
map <c-v> page-down

map <c-p> up
map <c-n> down

map <c-space> top
map <a-space> bottom

map <c-b>   updir
map <c-^>   updir
map -       updir
map <c-f>   open
map <enter> open

map <c-s> search-next
map <c-r> search-prev

map <c-x><c-c> quit

map <a-w> copy
map <c-w> cut
map <c-y> paste

